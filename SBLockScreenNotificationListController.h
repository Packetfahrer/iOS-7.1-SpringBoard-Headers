/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "SBCoordinatedPresenting.h"
#import "SBPresentingDelegate.h"
#import "SBVolumePressBandit.h"
#import "SpringBoard-Structs.h"
#import "SBUnlockActionHandler.h"
#import "BBObserverDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "SBLockScreenNotificationViewDelegate.h"
#import "SBLockScreenNotificationModel.h"
#import "SBUIBannerSource.h"
#import "SBUIBannerTargetManagerObserver.h"
#import "SBLockScreenNotificationBannerItemDelegate.h"

@class NSMutableArray, SBLockScreenBounceAnimator, NSSet, SBLockScreenNotificationCell, SBLockScreenNotificationListView, BBObserver, SBUnlockActionContext;
@protocol SBUIBannerTarget, SBLockScreenNotificationListDelegate;

__attribute__((visibility("hidden")))
@interface SBLockScreenNotificationListController : XXUnknownSuperclass <SBLockScreenNotificationViewDelegate, SBLockScreenNotificationModel, BBObserverDelegate, SBVolumePressBandit, SBUIBannerSource, SBUIBannerTargetManagerObserver, SBUnlockActionHandler, SBLockScreenNotificationBannerItemDelegate, SBPresentingDelegate, SBCoordinatedPresenting> {
	SBLockScreenNotificationListView* _notificationView;
	id<SBLockScreenNotificationListDelegate> _delegate;
	BBObserver* _observer;
	NSMutableArray* _listItems;
	NSMutableArray* _realertTimers;
	BOOL _hibernating;
	BOOL _quietModeEnabled;
	SBUnlockActionContext* _actionContext;
	id<SBUIBannerTarget> _bannerTarget;
	NSMutableArray* _listItemsBannerQueue;
	BOOL _bannersEnabled;
	BOOL _isOnscreen;
	BOOL _hasMissedUnreadNotifications;
	int _messagePrivacyRevealState;
	id<SBPresentingDelegate> _presentingDelegate;
	SBLockScreenBounceAnimator* _bounceAnimator;
	SBLockScreenNotificationCell* _hintingCell;
	CGPoint _hintingCellOriginalOffset;
	BOOL _hasAnyContent;
}
@property(assign, nonatomic, getter=isBannersEnabled) BOOL bannersEnabled;
@property(readonly, assign, nonatomic) NSSet* conflictingGestures;
@property(readonly, assign, nonatomic) int coordinatedPresentingControllerIdentifier;
@property(assign, nonatomic) id<SBLockScreenNotificationListDelegate> delegate;
@property(readonly, assign, nonatomic) NSSet* gestures;
@property(assign, nonatomic) BOOL hasAnyContent;
@property(readonly, assign) BOOL hasMissedUnreadNotifications;
@property(readonly, assign, nonatomic) float hintDisplacement;
@property(readonly, assign, nonatomic) unsigned hintEdge;
@property(assign, nonatomic) BOOL isHibernating;
@property(assign, nonatomic) id<SBPresentingDelegate> presentingDelegate;
@property(readonly, assign, nonatomic) BOOL quietModeEnabled;
@property(readonly, assign, nonatomic) NSSet* tapExcludedViews;
@property(retain, nonatomic) SBUnlockActionContext* unlockActionContext;
+ (id)underlayPropertiesFactory;
- (id)initWithNibName:(id)nibName bundle:(id)bundle;
- (void)_activateOrUpdateCardItem:(id)item animated:(BOOL)animated;
- (void)_addBounceAnimator;
- (void)_hardwareButtonPressed:(id)pressed;
- (void)_killRealerts:(id)realerts;
- (id)_listItemContainingBulletinID:(id)anId;
- (id)_listItemContainingCardItem:(id)item;
- (id)_listItemContainingSystemAlert:(id)alert;
- (id)_listItemForNewBulletin:(id)newBulletin;
- (void)_playSoundForBulletinIfPossible:(id)bulletinIfPossible;
- (void)_realertTimerFired:(id)fired;
- (void)_reloadVolumePressBanditPreference;
- (void)_scheduleRealerts:(id)realerts;
- (BOOL)_shouldAddBannerItem:(id)item;
- (void)_showTestBulletin;
- (void)_sortListItems;
- (void)_updateModelAndViewForAdditionOfItem:(id)item;
- (void)_updateModelAndViewForModificationOfItem:(id)item;
- (void)_updateModelAndViewForRemovalOfItem:(id)item;
- (void)_updateModelAndViewForReplacingItem:(id)replacingItem withNewItem:(id)newItem;
- (void)_updateModelForRemovalOfItem:(id)item updateView:(BOOL)view;
- (void)abortAnimatedTransition;
- (BOOL)activateAlertItem:(id)item;
- (void)activateCardItem:(id)item animated:(BOOL)animated;
- (void)bannerItemWasTapped:(id)tapped;
- (void)bannerTargetManager:(id)manager didAddTarget:(id)target;
- (void)bannerTargetManager:(id)manager didRemoveTarget:(id)target;
- (void)beginPresentationWithTouchLocation:(CGPoint)touchLocation;
- (void)cancelGestureRecognizer:(id)recognizer;
- (id)cellAtTouchLocation:(CGPoint)touchLocation;
- (void)clearItemsForNotificationCenter;
- (void)concealForChangeInMessagePrivacy;
- (unsigned)count;
- (void)deactivateAlertItem:(id)item;
- (void)deactivateCardItem:(id)item;
- (void)dealloc;
- (id)dequeueNextBannerItemForTarget:(id)target;
- (BOOL)dismissReadNotifications;
- (void)endTransitionWithVelocity:(CGPoint)velocity completion:(id)completion;
- (void)handleVolumeDecrease;
- (void)handleVolumeIncrease;
- (BOOL)isPresentingControllerTransitioning;
- (id)listItemAtIndexPath:(id)indexPath;
- (void)listView:(id)view cellDidBeginScrolling:(id)cell;
- (void)listView:(id)view cellDidEndScrolling:(id)cell;
- (void)listViewDidBeginScrolling:(id)listView;
- (void)listViewDidEndScrolling:(id)listView;
- (void)loadView;
- (id)lockScreenScrollView;
- (void)lockScreenViewDidEndScrollingOnPage:(int)lockScreenView;
- (id)newBannerViewForContext:(id)context;
- (void)noteUnlockActionChanged:(id)changed;
- (void)observer:(id)observer addBulletin:(id)bulletin forFeed:(unsigned)feed;
- (id)observer:(id)observer composedAttachmentImageForType:(int)type thumbnailData:(id)data key:(id)key;
- (void)observer:(id)observer modifyBulletin:(id)bulletin;
- (id)observer:(id)observer multipleThumbnailSizeConstraintsForAttachmentType:(int)attachmentType;
- (void)observer:(id)observer noteAlertBehaviorOverridesChanged:(unsigned)changed;
- (void)observer:(id)observer noteInvalidatedBulletinIDs:(id)ids;
- (void)observer:(id)observer noteServerConnectionStateChanged:(BOOL)changed;
- (void)observer:(id)observer removeBulletin:(id)bulletin;
- (BOOL)observerShouldFetchAttachmentImageBeforeBulletinDelivery:(id)observer;
- (id)peekNextBannerItemForTarget:(id)target;
- (id)pendOrDeactivateAlertItems;
- (void)performSystemAlertUnlockActions;
- (void)prepareForTeardown;
- (BOOL)presentingController:(id)controller gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (BOOL)presentingController:(id)controller gestureRecognizerShouldBegin:(id)gestureRecognizer;
- (void)presentingController:(id)controller willHandleGesture:(id)gesture;
- (void)presentingControllerDidFinishPresentation:(id)presentingController;
- (void)reenableGestureRecognizer:(id)recognizer;
- (void)revealForChangeInMessagePrivacy;
- (void)setInScreenOffMode:(BOOL)screenOffMode;
- (void)setIsOnscreen:(BOOL)onscreen;
- (BOOL)shouldPlaySoundForItem:(id)item;
- (BOOL)shouldTreatItemAsInert:(id)inert;
- (void)turnOnScreenIfNecessaryForItem:(id)item;
- (void)unlockUIWithActionContext:(id)actionContext;
- (void)updateCardItem:(id)item;
- (void)updateTransitionWithTouchLocation:(CGPoint)touchLocation velocity:(CGPoint)velocity;
@end

