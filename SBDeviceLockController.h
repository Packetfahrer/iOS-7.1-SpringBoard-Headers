/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library

@class SBPasscodeLockAssertionManager, SecureBackup, NSString, SBPasscodeLockDisableAssertion, PCPersistentTimer;

__attribute__((visibility("hidden")))
@interface SBDeviceLockController : XXUnknownSuperclass {
	int _lockState;
	double _lastLockDate;
	BOOL _isPermanentlyBlocked;
	BOOL _isBlockedForThermalCondition;
	double _deviceLockUnblockTime;
	PCPersistentTimer* _deviceLockUnblockTimer;
	BOOL _cachedPasscodeLockedOrBlocked;
	SBPasscodeLockAssertionManager* _assertionManager;
	SBPasscodeLockDisableAssertion* _transientPasscodeCheckingAssertion;
	BOOL _okToSendNotifications;
	SecureBackup* _secureBackupHelper;
	NSString* _lastIncorrectPasscodeAttempt;
}
@property(assign, getter=isBlockedForThermalCondition) BOOL blockedForThermalCondition;
+ (id)_sharedControllerCreateIfNecessary:(BOOL)necessary;
+ (id)_sharedControllerIfExists;
+ (id)sharedController;
- (id)init;
- (void)_addDeviceLockDisableAssertion:(id)assertion;
- (void)_cachePassword:(id)password;
- (void)_clearBlockedState;
- (void)_clearUnblockTimer;
- (void)_enablePasscodeLockImmediately:(BOOL)immediately;
- (void)_noteBlockedReasonsMayHaveChanged;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(BOOL)changed;
- (void)_notifyOfFirstUnlock;
- (void)_removeDeviceLockDisableAssertion:(id)assertion;
- (void)_scheduleUnblockTimer;
- (void)_sendBlockStateChangeNotification;
- (void)_setDeviceLockUnblockTime:(double)time;
- (void)_setLockState:(int)state;
- (BOOL)_shouldLockDeviceNow;
- (BOOL)_temporarilyBlocked;
- (void)_unblockTimerFired;
- (void)_uncachePasscodeIfNecessary;
- (void)_updateDeviceLockedState;
- (BOOL)attemptDeviceUnlockWithPassword:(id)password appRequested:(BOOL)requested;
- (void)dealloc;
- (id)description;
- (BOOL)deviceHasPasscodeSet;
- (void)enablePasscodeLockImmediately;
- (BOOL)isBlocked;
- (BOOL)isPasscodeLocked;
- (BOOL)isPasscodeLockedCached;
- (BOOL)isPasscodeLockedOrBlocked;
- (BOOL)isPermanentlyBlocked:(double*)blocked;
- (id)lastLockDate;
- (BOOL)shouldAllowUnlockToApplication:(id)application;
@end

